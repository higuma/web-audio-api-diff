
callback DecodeSuccessCallback = void (AudioBuffer decodedData);
callback DecodeErrorCallback = void ();

[Constructor]
interface AudioContext {

    readonly attribute AudioDestinationNode destination;
    readonly attribute float sampleRate;
    readonly attribute double currentTime;
    readonly attribute AudioListener listener;
    readonly attribute unsigned long activeSourceCount;

    AudioBuffer createBuffer(unsigned long numberOfChannels, unsigned long length, float sampleRate);

    AudioBuffer createBuffer(ArrayBuffer buffer, boolean mixToMono);

    void decodeAudioData(ArrayBuffer audioData,
                         DecodeSuccessCallback successCallback,
                         optional DecodeErrorCallback errorCallback);


    // AudioNode creation 
    AudioBufferSourceNode createBufferSource();

    MediaElementAudioSourceNode createMediaElementSource(HTMLMediaElement mediaElement);

    MediaStreamAudioSourceNode createMediaStreamSource(MediaStream mediaStream);

    ScriptProcessorNode createScriptProcessor(unsigned long bufferSize,
                                              optional unsigned long numberOfInputChannels = 2,
                                              optional unsigned long numberOfOutputChannels = 2);

    AnalyserNode createAnalyser();
    GainNode createGain();
    DelayNode createDelay(optional double maxDelayTime = 1.0);
    BiquadFilterNode createBiquadFilter();
    WaveShaperNode createWaveShaper();
    PannerNode createPanner();
    ConvolverNode createConvolver();

    ChannelSplitterNode createChannelSplitter(optional unsigned long numberOfOutputs = 6);
    ChannelMergerNode createChannelMerger(optional unsigned long numberOfInputs = 6);

    DynamicsCompressorNode createDynamicsCompressor();

    OscillatorNode createOscillator();
    WaveTable createWaveTable(Float32Array real, Float32Array imag);

};

callback OfflineRenderSuccessCallback = void (AudioBuffer renderedData);

[Constructor]
interface OfflineAudioContext : AudioContext {

    void startRendering();
    
    attribute OfflineRenderSuccessCallback oncomplete;

};

interface AudioNode {

    void connect(AudioNode destination, optional unsigned long output = 0, optional unsigned long input = 0);
    void connect(AudioParam destination, optional unsigned long output = 0);
    void disconnect(optional unsigned long output = 0);

    readonly attribute AudioContext context;
    readonly attribute unsigned long numberOfInputs;
    readonly attribute unsigned long numberOfOutputs;

};

interface AudioSourceNode : AudioNode {

};

interface AudioDestinationNode : AudioNode {

    readonly attribute unsigned long maxNumberOfChannels;
    attribute unsigned long numberOfChannels;

};

interface AudioParam {

    attribute float value;
    readonly attribute float computedValue;
    readonly attribute float minValue;
    readonly attribute float maxValue;
    readonly attribute float defaultValue;

    // Parameter automation. 
    void setValueAtTime(float value, double startTime);
    void linearRampToValueAtTime(float value, double endTime);
    void exponentialRampToValueAtTime(float value, double endTime);

    // Exponentially approach the target value with a rate having the given time constant. 
    void setTargetAtTime(float target, double startTime, double timeConstant);

    // Sets an array of arbitrary parameter values starting at time for the given duration. 
    // The number of values will be scaled to fit into the desired duration. 
    void setValueCurveAtTime(Float32Array values, double startTime, double duration);

    // Cancels all scheduled parameter changes with times greater than or equal to startTime. 
    void cancelScheduledValues(double startTime);

};

interface GainNode : AudioNode {

    readonly attribute AudioParam gain;

};

interface DelayNode : AudioNode {

    readonly attribute AudioParam delayTime;

};

interface AudioBuffer {

    readonly attribute float sampleRate;
    readonly attribute long length;

    // in seconds 
    readonly attribute double duration;

    readonly attribute long numberOfChannels;

    Float32Array getChannelData(unsigned long channel);

};

interface AudioBufferSourceNode : AudioSourceNode {

    const unsigned short UNSCHEDULED_STATE = 0;
    const unsigned short SCHEDULED_STATE = 1;
    const unsigned short PLAYING_STATE = 2;
    const unsigned short FINISHED_STATE = 3;

    readonly attribute unsigned short playbackState;

    attribute AudioBuffer? buffer;

    attribute AudioParam playbackRate;

    attribute boolean loop;
    attribute double loopStart;
    attribute double loopEnd;

    void start(double when, optional double offset = 0, optional double duration);
    void stop(double when);

};

interface MediaElementAudioSourceNode : AudioSourceNode {

};

interface ScriptProcessorNode : AudioNode {

    attribute EventListener onaudioprocess;

    readonly attribute long bufferSize;

};

interface AudioProcessingEvent : Event {

    attribute ScriptProcessorNode node;
    readonly attribute double playbackTime;
    readonly attribute AudioBuffer inputBuffer;
    readonly attribute AudioBuffer outputBuffer;

};

enum PanningModelType {
  "equalpower",
  "HRTF",
  "soundfield"
}

enum DistanceModelType {
  "linear",
  "inverse",
  "exponential"
}

interface PannerNode : AudioNode {

    // Default for stereo is HRTF 
    attribute PanningModelType panningModel;

    // Uses a 3D cartesian coordinate system 
    void setPosition(float x, float y, float z);
    void setOrientation(float x, float y, float z);
    void setVelocity(float x, float y, float z);

    // Distance model and attributes 
    attribute DistanceModelType distanceModel;
    attribute float refDistance;
    attribute float maxDistance;
    attribute float rolloffFactor;

    // Directional sound cone 
    attribute float coneInnerAngle;
    attribute float coneOuterAngle;
    attribute float coneOuterGain;

};

interface AudioListener {

    // same as OpenAL (default 1) 
    attribute float dopplerFactor;

    // in meters / second (default 343.3) 
    attribute float speedOfSound;

    // Uses a 3D cartesian coordinate system 
    void setPosition(float x, float y, float z);
    void setOrientation(float x, float y, float z, float xUp, float yUp, float zUp);
    void setVelocity(float x, float y, float z);

};

interface ConvolverNode : AudioNode {

    attribute AudioBuffer buffer;
    attribute boolean normalize;

};

interface AnalyserNode : AudioNode {

    // Real-time frequency-domain data 
    void getFloatFrequencyData(Float32Array array);
    void getByteFrequencyData(Uint8Array array);

    // Real-time waveform data 
    void getByteTimeDomainData(Uint8Array array);

    attribute unsigned long fftSize;
    readonly attribute unsigned long frequencyBinCount;

    attribute float minDecibels;
    attribute float maxDecibels;

    attribute float smoothingTimeConstant;

};

interface ChannelSplitterNode : AudioNode {

};

interface ChannelMergerNode : AudioNode {

};

interface DynamicsCompressorNode : AudioNode {

    readonly attribute AudioParam threshold; // in Decibels
    readonly attribute AudioParam knee; // in Decibels
    readonly attribute AudioParam ratio; // unit-less
    readonly attribute AudioParam reduction; // in Decibels
    readonly attribute AudioParam attack; // in Seconds
    readonly attribute AudioParam release; // in Seconds

};

enum BiquadFilterType {
  "lowpass",
  "highpass",
  "bandpass",
  "lowshelf",
  "highshelf",
  "peaking",
  "notch",
  "allpass"
}

interface BiquadFilterNode : AudioNode {

    attribute BiquadFilterType type;
    readonly attribute AudioParam frequency; // in Hertz
    readonly attribute AudioParam detune; // in Cents
    readonly attribute AudioParam Q; // Quality factor
    readonly attribute AudioParam gain; // in Decibels

    void getFrequencyResponse(Float32Array frequencyHz,
                              Float32Array magResponse,
                              Float32Array phaseResponse);

};

interface WaveShaperNode : AudioNode {

    attribute Float32Array curve;

};

enum OscillatorType {
  "sine",
  "square",
  "sawtooth",
  "triangle",
  "custom"
}

interface OscillatorNode : AudioSourceNode {

    attribute OscillatorType type;

    const unsigned short UNSCHEDULED_STATE = 0;
    const unsigned short SCHEDULED_STATE = 1;
    const unsigned short PLAYING_STATE = 2;
    const unsigned short FINISHED_STATE = 3;

    readonly attribute unsigned short playbackState;

    readonly attribute AudioParam frequency; // in Hertz
    readonly attribute AudioParam detune; // in Cents

    void start(double when);
    void stop(double when);
    void setWaveTable(WaveTable waveTable);

};

interface WaveTable {

};

interface MediaStreamAudioSourceNode : AudioSourceNode {

};

